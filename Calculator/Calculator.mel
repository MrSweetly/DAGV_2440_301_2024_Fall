////////////
// Calulator V2.21 with UI
////////////

// Calulator UI

global proc calculatorUI()
{
    if (`window -exists calculatorWindow`) 
    {
        deleteUI calculatorWindow;
    }
    // End of if

    window -title "Calulator" -widthHeight 300 200 calculatorWindow;

    columnLayout -adjustableColumn true;

    // Input field
    text -label "Enter numbers (comma-separated):";
    textField -text "" numberField;

    // Dropdown for operations
    text -label "Select operation:";
    optionMenu -label "Operation" operationMenu;
    menuItem -label "add";
    menuItem -label "subtract";
    menuItem -label "multiply";
    menuItem -label "divide";
    menuItem -label "mean";
    menuItem -label "median";
    menuItem -label "exponent";

    // Result field
    text -label "Result:";
    textField -editable false resultField;

    // Calculate button
    button -label "Calculate" -command "performCalculation()";

    showWindow calculatorWindow;
}
// End of CalculatorUI

// Perform calculation based on selected operation
global proc performCalculation()
{
    string $inputString = `textField -query -text numberField`;

    float $numbers[] = stringToFloatArray($inputString);

    string $operation = `optionMenu -query -value operationMenu`;

    float $result;

    if ($operation == "add") 
    {
        $result = sum($numbers);
    } 
    else if ($operation == "subtract") 
    {
        $result = subtract($numbers);
    } 
    else if ($operation == "multiply") 
    {
        $result = multiply($numbers);
    } 
    else if ($operation == "divide") 
    {
        $result = divide($numbers);
    }
    else if ($operation == "mean")
    {
        $result = mean($numbers);
    }
    else if ($operation == "median")
    {
        $result = median($numbers);
    }
    else if ($operation == "exponent")
    {
        if (size($numbers) != 2) 
        {
            error("Error: Exponent operation requires exactly 2 numbers.");
            return;
        }
        // End of if
        $result = exponent($numbers[0], $numbers[1]);
    }
    else 
    {
        error("Error: Unsupported operation selected.");
        return;
    }
    // End of if else chain

    // Display result
    textField -edit -text ("" + $result) resultField;
}
// End of performCalculation

// Mean
global proc float mean(float $input[])
{
    if (size($input) == 0)
    {
        error("Error: No numbers provided for mean calculation.");
        return 0;
    }
    // End of if

    float $sumValue = sum($input);
    float $meanValue = $sumValue / size($input);
    return $meanValue;
}
// End of mean

// Median
global proc float median(float $input[]) 
{
    if (size($input) == 0) 
    {
        error("Error: No numbers provided for median calculation.");
        return 0;
    }
    // End of if

    // Sort input array
    float $sortedInput[] = sort($input);
    int $n = size($sortedInput);

    // Calculate median
    if ($n % 2 == 0) 
    {
        return ($sortedInput[$n / 2 - 1] + $sortedInput[$n / 2]) / 2.0;
    } 
    else 
    {
        return $sortedInput[$n / 2];
    }
    // End of if else
}
// End of median

// Exponent
global proc float exponent(float $base, float $exp)
{
    return pow($base, $exp);
}
// End of exponent

// Division
global proc float divide(float $input[])
{
    if (size($input) == 0)
    {
        error("Error: No numbers provided for division.");
        return 0;
    }
    // End of if

    float $result = $input[0];
    int $i;
    for ($i = 1; $i < size($input); $i++) 
    {
        if ($input[$i] == 0) 
        {
            error("Error: Division by zero.");
            return 0;
        }
        // End of if
        $result /= $input[$i];
    }
    // End of for
    return $result;
}
// End of divide

// Multiplication
global proc float multiply(float $input[])
{
    if (size($input) == 0)
    {
        error("Error: No numbers provided for multiplication.");
        return 0;
    }
    // End of if

    float $result = 1;
    int $i;
    for ($i = 0; $i < size($input); $i++) 
    {
        $result *= $input[$i];
    }
    // End of for
    return $result;
}
// End of multiply

// Subtraction
global proc float subtract(float $input[])
{
    if (size($input) == 0)
    {
        error("Error: No numbers provided for subtraction.");
        return 0;
    }
    // End of if

    float $result = $input[0];
    int $i;
    for ($i = 1; $i < size($input); $i++) 
    {
        $result -= $input[$i];
    }
    // End of for
    return $result;
}
// End of subtract

// Convert comma-separated string into an array of floats
global proc float[] stringToFloatArray(string $inputString)
{
    string $numberArray[];
    tokenize $inputString "," $numberArray;

    int $size = size($numberArray);
    float $resultArray[];

    // Initialize the resultArray to the correct size
    int $i;
    for ($i = 0; $i < $size; $i++) 
    {
        // Convert the string to a float
        $resultArray[$i] = float($numberArray[$i]);
    }
    // End of for

    return $resultArray;
}
// End of stringToFloatArray

// Addition
global proc float sum(float $input[])
{
    float $result = 0;
    int $i;
    for ($i = 0; $i < size($input); $i++)
    {
        $result += $input[$i];
    }
    // End of for
    return $result;
}
// End of sum

// Activate calculatorUI
calculatorUI();

/*
Usage: Send code to Maya (Either from something like Visual Studio like I did, or just put all of this
into Maya itself), and run calculatorUI();. There is no icon, only code.


Note: This assignment killed me a little bit. Like, holy crap, median can die in a hole. I don't know why,
but it just didn't want to work with my UI. Either way, it is what it is, and it is DONE! Lovely stuff,
just suprisingly infuriating.
*/
